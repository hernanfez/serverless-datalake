{
  "Comment": "Simple pseudo flow",
  "StartAt": "Try",
  "States": {
    "Try": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Pre-update Comprehensive Catalogue",
          "States": {
            "Pre-update Comprehensive Catalogue": {
              "Type": "Task",
              "Resource": "${lStep1}",
              "Comment": "Pre-update Comprehensive Catalogue",
              "Next": "Check Manifest Process"
            },
            "Check Manifest Process": {
              "Type": "Task",
              "Resource": "${lStep4}",
              "Comment": "Execute Check Manifest Process",
              "Next": "Is Manifest Process"
            },
            "Is Manifest Process": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.body.manifest_enabled",
                  "StringEquals": "True",
                  "Next": "Check Manifest File"
                },
                {
                  "Variable": "$.body.manifest_enabled",
                  "StringEquals": "False",
                  "Next": "Execute Light Transformation"
                }
              ],
              "Default": "Execute Light Transformation"
            },
            "Check Manifest File": {
              "Type": "Task",
              "Resource": "${lStep5}",
              "Comment": "Check if this is the manifest file",
              "Next": "Is Manifest File"
            },
            "Execute Light Transformation": {
              "Type": "Task",
              "Resource": "${lStep2}",
              "Comment": "Execute Light Transformation",
              "ResultPath": "$.body.processedKeys",
              "Next": "Post-update comprehensive Catalogue"
            },
            "Is Manifest File": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.body.is_manifest_file",
                  "StringEquals": "True",
                  "Next": "Process Manifest File"
                },
                {
                  "Variable": "$.body.is_manifest_file",
                  "StringEquals": "False",
                  "Next": "Load datafile meta into DynamoDB"
                }
              ],
              "Default": "Load datafile meta into DynamoDB"
            },
            "Process Manifest File": {
              "Type": "Task",
              "Resource": "${lStep6}",
              "Comment": "Process Manifest File",
              "ResultPath": "$.body.processedKeys",
              "Next": "Post-update comprehensive Catalogue"
            },
            "Load datafile meta into DynamoDB": {
              "Type": "Task",
              "Resource": "${lStep7}",
              "Comment": "Load Datafile metadata into DynamoDB",
              "Next": "Is Manifest File Loaded"
            },
            "Is Manifest File Loaded": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.body.manifest_file_loaded",
                  "StringEquals": "True",
                  "Next": "Execute Light Transformation"
                },
                {
                  "Variable": "$.body.manifest_file_loaded",
                  "StringEquals": "False",
                  "Next": "Load datafile meta into DynamoDB"
                }
              ],
              "Default": "Load datafile meta into DynamoDB"
            },
            "Post-update comprehensive Catalogue": {
              "Type": "Task",
              "Resource": "${lStep3}",
              "Comment": "Post-update comprehensive Catalogue",
              "ResultPath": "$.statusCode",
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [ "States.ALL" ],
          "ResultPath": null,
          "Next": "Error"
        }
      ],
      "Next": "Done"
    },
    "Done": {
      "Type": "Succeed"
    },
    "Error": {
      "Type": "Task",
      "Resource": "${lError}",
      "Comment": "Send Original Payload to DLQ",
      "Next": "Failed"
    },
    "Failed": {
      "Type": "Fail"
    }
  }
}
{
  "Comment": "Simple pseudo flow",
  "StartAt": "Try",
  "States": {
    "Try": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Pre-update Comprehensive Catalogue",
          "States": {
            "Pre-update Comprehensive Catalogue": {
              "Type": "Task",
              "Resource": "${lStep1}",
              "Comment": "Pre-update Comprehensive Catalogue",
              "Next": "Execute Light Transformation"
            },
            "Execute Light Transformation": {
              "Type": "Task",
              "Resource": "${lStep2}",
              "Comment": "Execute Light Transformation",
              "ResultPath": "$.body.job",
              "Next": "Wait"
            },
            "Wait": {
                "Type": "Wait",
                "Seconds": 5,
                "Next": "Get Job status"
            },
            "Get Job status": {
                "Type": "Task",
                "Resource": "${lStep2check}",
                "ResultPath": "$.body.job",
                "Next": "Did Job finish?"
            },
            "Did Job finish?": {
                "Type": "Choice",
                "Choices": [{
                    "Variable": "$.body.job.jobDetails.jobStatus",
                    "StringEquals": "SUCCEEDED",
                    "Next": "Post-update Comprehensive Catalogue"
                },{
                    "Variable": "$.body.job.jobDetails.jobStatus",
                    "StringEquals": "FAILED",
                    "Next": "Job Failed"
                }],
                "Default": "Wait"
            },
            "Job Failed": {
              "Type": "Fail",
              "Error": "Job Failed",
              "Cause": "Job failed, please check the logs"
              },
            "Post-update Comprehensive Catalogue": {
              "Type": "Task",
              "Resource": "${lStep3}",
              "Comment": "Post-update comprehensive Catalogue",
              "ResultPath": "$.statusCode",
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [ "States.ALL" ],
          "ResultPath": null,
          "Next": "Error"
        }
      ],
      "Next": "Done"
    },
    "Done": {
      "Type": "Succeed"
    },
    "Error": {
      "Type": "Task",
      "Resource": "${lError}",
      "Comment": "Send Original Payload to DLQ",
      "Next": "Failed"
    },
    "Failed": {
      "Type": "Fail"
    }
  }
}